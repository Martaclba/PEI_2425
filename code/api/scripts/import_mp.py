import os
import subprocess
import pandas as pd
import psycopg
import tqdm
import random
from datetime import datetime
import argparse
import re
#from dotenv import load_dotenv

#load_dotenv('config/postgresql.cfg')

#DB_USER = os.getenv('DB_USER')
#DB_PASSWORD = os.getenv('DB_PASSWORD')
#DB_HOST = os.getenv('DB_HOST')
#DB_PORT = os.getenv('DB_PORT')
#DB_NAME = os.getenv('DB_NAME')

DB_USER = "mypharma_admin"
DB_PASSWORD = "admin"
DB_HOST = "localhost"
DB_PORT = 5432
DB_NAME = "mypharma"

def process_line(line):

    if "National" in line or "Mypharma" in line:
        return True
    return False

# Função para processar a string
regex = r"(?P<brick>\d{3})\s+(?P<Distrito>\w{2})\s+-\s+(?P<Regiao>[^;]+?)(?:\s+\((?P<Freguesia>[^)]+)\))?;\s+(?P<Produto>\w+);\s*(?P<Quantidade>\d+)"
def extrair_dados(texto):
    match = re.match(regex, texto)
    if match:
        return match.groupdict()  # Retorna os grupos como dicionário
    else:
        return None  # Retorna None se não houver correspondência



conn_string = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

parser = argparse.ArgumentParser(description="Load mypharma monthly file")
parser.add_argument("path", help="path to file")

args = parser.parse_args()


def find_most_recent_csv(directory):
    month = 0
    year = 0

    # Regex para capturar o formato mm_yy nos nomes dos ficheiros .csv
    pattern = r"(\d{2})_(\d{2})\.csv"
    
    most_recent_file = None
    most_recent_date = None

    # Listar todos os ficheiros na diretoria
    for filename in os.listdir(directory):
        print("Filename: ", filename)

        # Verificar se o ficheiro é .csv e segue o padrão
        match = re.match(pattern, filename)
        if match:
            # Extrair o mês e ano
            month = int(match.group(1))
            year = int(match.group(2)) + (2000 if int(match.group(2)) < 100 else 0)  # Ajustar para anos 2000+
            
            # Criar uma data para comparação
            file_date = datetime(year, month, 1)
            
            # Verificar se é a data mais recente
            if most_recent_date is None or file_date > most_recent_date:
                most_recent_date = file_date
                most_recent_file = filename

    return most_recent_file, month, year


# Paths
input_file,month,year = find_most_recent_csv("uploads/mypharma_csv/")            # Generates the cleaned CSV

# Step 1: Run the input script to generate the cleaned data
print(f"Running input script: {input_file}...")
try:
    subprocess.call(['C:\\Users\\Rafa\\AppData\\Local\\Programs\\Python\\Python313\\python.exe', input_file, args.path])
    print(f"Input file {input_file} executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Failed to execute {input_file}!")
    print(e.stderr)
    exit(1)

cleaned_csv, month, year = find_most_recent_csv("uploads/mypharma_csv/")  # File generated by detetor.py
df = pd.read_csv('uploads/mypharma_csv/' + cleaned_csv, delimiter=';', encoding='utf-8')

registry_date = datetime(year,month,1)

# Step 3: Insert data into the database
print("Inserting data into the database...")
with psycopg.connect(conn_string) as conn:
    with conn.cursor() as cur:
        try:
            cur.execute('BEGIN')  # Start transaction
            
            for row in tqdm.tqdm(df.values):

                if (not process_line(str(row))):
                    # print(str(row))
                    
                    fields = extrair_dados(str(row))

                    # region_name = row[0].strip()
                    # entity_name = row[1].strip()
                    # so_units = int(row[2].strip())
                    # so_units = row[2]  # Ensure it's an integer

                    if fields:
                        brick = fields['brick']
                        district = fields['Distrito']
                        region_name = fields['Regiao']
                        town = fields['Freguesia']
                        entity_name = fields['Produto']
                        so_units = fields['Quantidade']

                        print(str(region_name) + " " + str(entity_name) + " " + str(so_units))

                        # Insert or find Region
                        cur.execute(f"SELECT id_region FROM region WHERE name = '{region_name}';")
                        region = cur.fetchone()
                        if region is None:
                            cur.execute(f"INSERT INTO region (name) VALUES ('{region_name}') RETURNING id_region;")
                            region = cur.fetchone()
                        region_id = region[0]
                        
                        entity_parts = entity_name.split(" - ")
                        company = entity_parts[0].strip()
                        product = entity_parts[1].strip() if len(entity_parts) > 1 else None
                        pack = entity_parts[2].strip() if len(entity_parts) > 2 else None

                        # Insert or find Company
                        cur.execute(f"SELECT id_company FROM company WHERE name = '{company}';")
                        company = cur.fetchone()
                        if company is None:
                            cur.execute(f"INSERT INTO company (name) VALUES ('{company}') RETURNING id_company;")
                            company = cur.fetchone()
                        company_id = company[0]

                        # Insert or find Product
                        if product:
                            cur.execute(f"""
                                SELECT cnp FROM product WHERE name = '{product}' AND fk_id_company = {company_id};
                            """)
                            product_row = cur.fetchone()
                            if product_row is None:
                                cur.execute(f"""
                                INSERT INTO product (cnp, name, fk_id_company) 
                                VALUES ({random.randint(1, 1000000000)}, '{product}', {company_id}) 
                                RETURNING cnp;
                            """)
                                product_row = cur.fetchone()
                            product_id = product_row[0]
                        else:
                            product_id = None  # If no product, handle appropriately

                        # Insert or find Sale for the given date (August 1st, current year)
                        cur.execute(f"""
                            SELECT id_sale FROM sale 
                            WHERE fk_brick = {brick} AND registry_date = '{registry_date}';
                        """)
                        sale = cur.fetchone()
                        if sale is None:
                            cur.execute(f"""
                                INSERT INTO sale (registry_date, fk_brick) 
                                VALUES ('{registry_date}', {brick}) 
                                RETURNING id_sale;
                            """)
                            sale = cur.fetchone()
                        sale_id = sale[0]

                        # Insert SO_Units into sale_product table
                        if product_id:
                            cur.execute(f"""
                                INSERT INTO sale_product (fk_id_sale, fk_cnp, product_amount) 
                                VALUES (
                                    {sale_id}, 
                                    {product_id}, 
                                    {so_units}
                                ) 
                                ON CONFLICT DO NOTHING;
                            """)

            conn.commit()  # Commit everything

        except Exception as e:
            print("Error inserting new values from file:", e)
            conn.rollback()  # Rollback on error

        try:
            cur.execute('BEGIN')  
            cur.execute('REFRESH MATERIALIZED VIEW general_table')
            cur.execute('REFRESH MATERIALIZED VIEW general_table_per_years')
            cur.execute('REFRESH MATERIALIZED VIEW general_delegates_and_bricks')
            
            conn.commit()
            print("Views refreshed successfully.")
        except Exception as e:
            print("Could not refresh views: ", e)
            conn.rollback()