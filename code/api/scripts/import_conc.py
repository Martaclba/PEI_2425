from datetime import datetime
import subprocess
import pandas as pd
import psycopg
from tqdm import tqdm
import random
import argparse
import re
import os
from dotenv import load_dotenv

load_dotenv('config/postgresql.cfg')

DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_HOST = os.getenv('DB_HOST')
DB_PORT = os.getenv('DB_PORT')
DB_NAME = os.getenv('DB_NAME')

conn_string = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

Distritos_Sigla = {   
    'Açores':'Ac',
    'Aveiro':'Av',
    'Beja': 'BJ',
    'Braga':'Br',
    'Bragança':'Bg',
    'Castelo Branco': 'Cb',
    'Coimbra' : 'Co',
    'Évora' : 'Ev',
    'Faro':'Fr',
    'Guarda': 'Gr',
    'Leiria': 'Lr',
    'Lisboa': 'Lx',
    'Madeira': 'Md',
    'Portalegre':'Pr',
    'Porto':'Po',
    'Santarém':'Sr',
    'Setúbal':'St',
    'Viana do Castelo': 'Vc',
    'Vila Real':'Vr',
    'Viseu':'Vs'
}

Sigla_Distritos = {   
    'Ac':'Açores',
    'Av':'Aveiro',
    'Bj':'Beja',
    'Br':'Braga',
    'Bg':'Bragança',
    'Cb':'Castelo Branco',
    'Co':'Coimbra',
    'Ev':'Évora',
    'Fr':'Faro',
    'Gr':'Guarda',
    'Lr':'Leiria',
    'Lx':'Lisboa',
    'Md':'Madeira',
    'Pr':'Portalegre',
    'Po':'Porto',
    'Sr':'Santarém',
    'St':'Setúbal',
    'Vc':'Viana do Castelo',
    'Vr':'Vila Real',
    'Vs':'Viseu'
}


def find_most_recent_csv(directory):
    month= 0
    year = 0

    
    # Regex para capturar o formato mm_yy nos nomes dos ficheiros .csv
    pattern = r"(\d{2})_(\d{2})\.csv"
    
    most_recent_file = None
    most_recent_date = None

    # Listar todos os ficheiros na diretoria
    for filename in os.listdir(directory):
        print("Filename: ", filename)

        # Verificar se o ficheiro é .csv e segue o padrão
        match = re.match(pattern, filename)
        if match:
            # Extrair o mês e ano
            month = int(match.group(1))
            year = int(match.group(2)) + (2000 if int(match.group(2)) < 100 else 0)  # Ajustar para anos 2000+
            
            # Criar uma data para comparação
            file_date = datetime(year, month, 1)
            
            # Verificar se é a data mais recente
            if most_recent_date is None or file_date > most_recent_date:
                most_recent_date = file_date
                most_recent_file = filename

    return most_recent_file, month, year

parser = argparse.ArgumentParser(description="Load concurrency monthly hmr file")
parser.add_argument("path", help="path to file")

args = parser.parse_args()

# Load processed CSV
# Paths
# detector_script = "../backend/data_treat/detector.py"  # Validation script
input_file = "scripts/processa_hmr_concorrencia_mensal.py"  # Generates the cleaned CSV

# Step 1: Run the input script to generate the cleaned data
print(f"Running input script: {input_file} for file {args.path}...")
try:
    subprocess.call(['C:\\Users\\Rafa\\AppData\\Local\\Programs\\Python\\Python313\\python.exe', input_file, args.path])
    print(f"Input file {input_file} for {args.path} executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Failed to execute {input_file}!")
    print(e.stderr)
    exit(1)


cleaned_csv, month, year = find_most_recent_csv("uploads/conc_csv")  # File generated by detetor.py
df = pd.read_csv('uploads/conc_csv/' + cleaned_csv, delimiter=';', encoding='utf-8')

# Define registry dates for July, August, and September
if month  >= 3 :
    dates = {
    "Mes1": datetime(year, month-2, 1), # January or superior
    "Mes2": datetime(year, month-1, 1), # February or superior
    "Mes3": datetime(year, month, 1) # March or superior
    }
if month  == 1 :
    dates = {
        "Mes1": datetime(year-1, 11, 1),  # November
        "Mes2": datetime(year-1, 12, 1),  # December
        "Mes3": datetime(year, month, 1)   # January
    }
if month  == 2 :
    dates = {
        "Mes1": datetime(year-1, 12, 1),  # December
        "Mes2": datetime(year, month-1, 1),  # January
        "Mes3": datetime(year, month, 1)   # February
    }



# Função para processar a string
regex = r"(?P<brick>\d{3})\s+(?P<Distrito>\w{2})\s+-\s+(?P<Regiao>.+?)(?:\s+\((?P<Freguesia>[^)]+\)))?;?$"

def extrair_dados(texto):
    match = re.match(regex, texto)
    if match:
        return match.groupdict()  # Retorna os grupos como dicionário
    else:
        return None  # Retorna None se não houver correspondência

# Insert data into the database
print("Inserting data into the database...")
with psycopg.connect(conn_string) as conn:
    with conn.cursor() as cur:
        try:
            cur.execute('BEGIN')  # Start transaction
            
            for _, row in tqdm(df.iterrows(), total=len(df)):
                delegate_name = row['Delegado'].strip()
                full_region= row['Regiao'].strip()
                company_name = row['Empresa'].strip()
                market_name = row['Market'].strip()
                product_name = row['Product'].strip() if pd.notna(row['Product']) else None
                pack_name = row['Pack'].strip() if pd.notna(row['Pack']) else None

                full_region_is_not_ND = not (full_region == 'N/D')
                pack_name_is_ND = pack_name == 'N/D'
                market_is_not__all_market = "All Market" not in market_name
                product_name_is_not_ND = not (product_name == 'N/D')

                if (full_region_is_not_ND and pack_name_is_ND and market_is_not__all_market and product_name_is_not_ND):


                    
                    fields = extrair_dados(full_region)
                    # print("FIELDS: ", fields)
                    brick = fields['brick']
                    district_name = fields['Distrito']
                    region_name = fields['Regiao']
                    town_name = fields['Freguesia']

                    
                    
                    # Delegate
                    cur.execute(f"SELECT id_delegate FROM delegate WHERE name = '{delegate_name}';")
                    delegate = cur.fetchone()
                    if delegate is None:
                        cur.execute(f"INSERT INTO delegate (name) VALUES ('{delegate_name}') RETURNING id_delegate;")
                        delegate = cur.fetchone()
                    delegate_id = delegate[0]

                    # Insert or find Region
                    cur.execute(f"SELECT id_region FROM region WHERE name = '{region_name}';")
                    region = cur.fetchone()
                    if region is None:
                        cur.execute(f"INSERT INTO region (name) VALUES ('{region_name}') RETURNING id_region;")
                        region = cur.fetchone()
                    region_id = region[0]

                    # District
                    cur.execute(f"SELECT id_district FROM district WHERE name = '{Sigla_Distritos[district_name]}';")
                    district = cur.fetchone()
                    if district is None:
                        cur.execute(f"INSERT INTO district (name) VALUES ('{Sigla_Distritos[district_name]}') RETURNING id_district;")
                        district = cur.fetchone()
                    district_id = district[0]
                    
                    # Town
                    town_id = None
                    if town_name:
                        cur.execute(f"SELECT id_town FROM town WHERE name = '{town_name}';")
                        town = cur.fetchone()
                        if town is None:
                            cur.execute(f"INSERT INTO town (name) VALUES ('{town_name}') RETURNING id_town;")
                            town = cur.fetchone()
                        town_id = town[0]


                    # Insert or find Company
                    cur.execute(f"SELECT id_company FROM company WHERE name = '{company_name}';")
                    company = cur.fetchone()
                    if company is None:
                        cur.execute(f"INSERT INTO company (name) VALUES ('{company_name}') RETURNING id_company;")
                        company = cur.fetchone()
                    company_id = company[0]

                    # Hmr_Zone
                    cur.execute(f"SELECT brick FROM hmr_zone WHERE brick = {brick};")
                    hmr_zone = cur.fetchone()
                    if hmr_zone is None:
                        cur.execute(f"""
                            INSERT INTO hmr_zone (brick, fk_id_delegate, fk_id_region, fk_id_district, fk_id_town) 
                            VALUES ({brick}, {delegate_id}, {region_id}, {district_id}, {town_id if town_id else 'NULL'}) 
                            RETURNING brick;
                        """)
                        hmr_zone = cur.fetchone()
                    hmr_zone_id = hmr_zone[0]

                    # Insert or find Product
                    if product_name:
                        cur.execute(f"""
                            SELECT cnp FROM product WHERE name = '{product_name}' AND fk_id_company = {company_id};
                        """)
                        product_row = cur.fetchone()
                        if product_row is None:
                            cur.execute(f"""
                                INSERT INTO product (cnp, name, fk_id_company) 
                                VALUES ({random.randint(1, 1000000000)}, '{product_name}', {company_id}) 
                                RETURNING cnp;
                            """)
                            product_row = cur.fetchone()
                        product_id = product_row[0]
                    else:
                        product_id = None

                    for month_col, registry_date in dates.items():
                        so_units = int(row[month_col]) if pd.notna(row[month_col]) else 0
                        if so_units > 0:
                            # Insert or find Sale
                            cur.execute(f"""
                                SELECT id_sale FROM sale 
                                WHERE fk_brick = {brick} AND registry_date = '{registry_date}';
                            """)
                            sale = cur.fetchone()
                            if sale is None:
                                cur.execute(f"""
                                    INSERT INTO sale (registry_date, fk_brick) 
                                    VALUES ('{registry_date}', {brick}) 
                                    RETURNING id_sale;
                                """)
                                sale = cur.fetchone()
                            sale_id = sale[0]

                            # Insert SO_Units into sale_product table
                            if product_id:
                                cur.execute(f"""
                                    INSERT INTO sale_product (fk_id_sale, fk_cnp, product_amount) 
                                    VALUES (
                                        {sale_id}, 
                                        {product_id}, 
                                        {so_units}
                                    ) 
                                    ON CONFLICT DO NOTHING;
                                """)

            conn.commit()  # Commit transaction
            print("Data inserted successfully.")

        except Exception as e:
            print("Error inserting new values from file:", e)
            conn.rollback()  # Rollback on error

        try:
            cur.execute('BEGIN')  
            cur.execute('REFRESH MATERIALIZED VIEW general_table')
            cur.execute('REFRESH MATERIALIZED VIEW general_table_per_years')
            cur.execute('REFRESH MATERIALIZED VIEW general_delegates_and_bricks')
            
            conn.commit()
            print("Views refreshed successfully.")
        except Exception as e:
            print("Could not refresh views: ", e)
            conn.rollback()
