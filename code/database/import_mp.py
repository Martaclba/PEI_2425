import os
import subprocess
import pandas as pd
import psycopg
import tqdm
import random
import datetime
import argparse


DB_USER = "mypharma"
DB_PASSWORD = "mypharma"
DB_HOST = "localhost"
DB_PORT = 5432
DB_NAME = "mypharma"

conn_string = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

parser = argparse.ArgumentParser(description="Load mypharma monthly file")
parser.add_argument("path", help="path to file")

args = parser.parse_args()

# Paths
detector_script = "../datat_treat/detetor_hmr_mp.py"  # Validation script
input_file = "../data_treat/hmr_mp_agt.py"  # Generates the cleaned CSV
cleaned_csv = "output.csv"  # File generated by detetor_hmr_mp.py
registry_date = datetime(datetime.now().year, 8, 1)  # August

# Step 1: Run the input script to generate the cleaned data
print(f"Running input script: {input_file}...")
try:
    subprocess.run(["python", input_file, args.path], check=True)
    print(f"Input file {input_file} executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Failed to execute {input_file}!")
    print(e.stderr)
    exit(1)

# Step 2: Run detector.py to validate the cleaned file
print("Validating file format...")
try:
    result = subprocess.run(["python", detector_script], capture_output=True, text=True, check=True)
    print("Validation successful. Proceeding with data processing...")
except subprocess.CalledProcessError as e:
    print("File format validation failed!")
    print(e.stderr)
    exit(1)

# Step 3: Load the cleaned CSV (generated by detetor_hmr_mp.py)
print("Loading cleaned CSV...")
df = pd.read_csv(cleaned_csv, delimiter=';')

# Step 3: Insert data into the database
print("Inserting data into the database...")
with psycopg.connect(conn_string) as conn:
    with conn.cursor() as cur:
        try:
            cur.execute('BEGIN')  # Start transaction
            
            for row in tqdm.tqdm(df.values):
                region_name = row[0].strip()
                entity_name = row[1].strip()
                so_units = int(row[2].strip())  # Ensure it's an integer
                
                # Insert or find Region
                cur.execute(f"SELECT id_region FROM region WHERE name = '{region_name}';")
                region = cur.fetchone()
                if region is None:
                    cur.execute(f"INSERT INTO region (name) VALUES ('{region_name}') RETURNING id_region;")
                    region = cur.fetchone()
                region_id = region[0]
                
                entity_parts = entity_name.split(" - ")
                company = entity_parts[0].strip()
                product = entity_parts[1].strip() if len(entity_parts) > 1 else None
                pack = entity_parts[2].strip() if len(entity_parts) > 2 else None

                # Insert or find Company
                cur.execute(f"SELECT id_company FROM company WHERE name = '{company}';")
                company = cur.fetchone()
                if company is None:
                    cur.execute(f"INSERT INTO company (name) VALUES ('{company}') RETURNING id_company;")
                    company = cur.fetchone()
                company_id = company[0]

                # Insert or find Product
                if product:
                    cur.execute(f"""
                        SELECT cnp FROM product WHERE name = '{product}' AND fk_id_company = {company_id};
                    """)
                    product_row = cur.fetchone()
                    if product_row is None:
                        cur.execute(f"""
                        INSERT INTO product (cnp, name, fk_id_company) 
                        VALUES ({random.randint(1, 1000000000)}, '{product}', {company_id}) 
                        RETURNING cnp;
                    """)
                        product_row = cur.fetchone()
                    product_id = product_row[0]
                else:
                    product_id = None  # If no product, handle appropriately

                # Insert or find Sale for the given date (August 1st, current year)
                cur.execute(f"""
                    SELECT id_sale FROM sale 
                    WHERE fk_brick = {region_id} AND registry_date = '{registry_date}';
                """)
                sale = cur.fetchone()
                if sale is None:
                    cur.execute(f"""
                        INSERT INTO sale (registry_date, fk_brick) 
                        VALUES ('{registry_date}', {region_id}) 
                        RETURNING id_sale;
                    """)
                    sale = cur.fetchone()
                sale_id = sale[0]

                # Insert SO_Units into sale_product table
                if product_id:
                    cur.execute(f"""
                        INSERT INTO sale_product (fk_id_sale, fk_cnp, product_amount) 
                        VALUES (
                            {sale_id}, 
                            {product_id}, 
                            {so_units}
                        ) 
                        ON CONFLICT DO NOTHING;
                    """)

            conn.commit()  # Commit everything

        except Exception as e:
            print("Error:", e)
            conn.rollback()  # Rollback on error