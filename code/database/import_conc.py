from datetime import datetime
import subprocess
import pandas as pd
import psycopg
from tqdm import tqdm
import random
import argparse

DB_USER = "mypharma"
DB_PASSWORD = "mypharma"
DB_HOST = "localhost"
DB_PORT = 5432
DB_NAME = "mypharma"

conn_string = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

parser = argparse.ArgumentParser(description="Load concurrency monthly hmr file")
parser.add_argument("path", help="path to file")

args = parser.parse_args()

# Load processed CSV
# Paths
detector_script = "../backend/data_treat/detector.py"  # Validation script
input_file = "../backend/data_treat/processa_hmr_concorrencia_mensal.py"  # Generates the cleaned CSV
cleaned_csv = "dados_hmr_concorrencia.csv"  # File generated by detetor.py

# Step 1: Run the input script to generate the cleaned data
print(f"Running input script: {input_file} for file {args.path}...")
try:
    subprocess.call(["python", input_file, args.path])
    print(f"Input file {input_file} for {args.path} executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Failed to execute {input_file}!")
    print(e.stderr)
    exit(1)

# Step 2: Run detector.py to validate the cleaned file
# print("Validating file format...")
# try:
#     result = subprocess.call(["python", detector_script], capture_output=True, text=True)
#     print("Validation successful. Proceeding with data processing...")
# except subprocess.CalledProcessError as e:
#     print("File format validation failed!")
#     print(e.stderr)
#     exit(1)

df = pd.read_csv(cleaned_csv, delimiter=';')

# Define registry dates for July, August, and September
current_year = datetime.now().year
dates = {
    "Mes1": datetime(current_year, 7, 1),  # July
    "Mes2": datetime(current_year, 8, 1),  # August
    "Mes3": datetime(current_year, 9, 1)   # September
}

# Insert data into the database
print("Inserting data into the database...")
with psycopg.connect(conn_string) as conn:
    with conn.cursor() as cur:
        try:
            cur.execute('BEGIN')  # Start transaction
            
            for _, row in tqdm(df.iterrows(), total=len(df)):
                region_name = row['Regiao'].strip()
                company_name = row['Empresa'].strip()
                market_name = row['Market'].strip()
                product_name = row['Product'].strip() if pd.notna(row['Product']) else None
                pack_name = row['Pack'].strip() if pd.notna(row['Pack']) else None

                # Insert or find Region
                cur.execute(f"SELECT id_region FROM region WHERE name = '{region_name}';")
                region = cur.fetchone()
                if region is None:
                    cur.execute(f"INSERT INTO region (name) VALUES ('{region_name}') RETURNING id_region;")
                    region = cur.fetchone()
                region_id = region[0]

                # Insert or find Company
                cur.execute(f"SELECT id_company FROM company WHERE name = '{company_name}';")
                company = cur.fetchone()
                if company is None:
                    cur.execute(f"INSERT INTO company (name) VALUES ('{company_name}') RETURNING id_company;")
                    company = cur.fetchone()
                company_id = company[0]

                # Insert or find Product
                if product_name:
                    cur.execute(f"""
                        SELECT cnp FROM product WHERE name = '{product_name}' AND fk_id_company = {company_id};
                    """)
                    product_row = cur.fetchone()
                    if product_row is None:
                        cur.execute(f"""
                            INSERT INTO product (cnp, name, fk_id_company) 
                            VALUES ({random.randint(1, 1000000000)}, '{product_name}', {company_id}) 
                            RETURNING cnp;
                        """)
                        product_row = cur.fetchone()
                    product_id = product_row[0]
                else:
                    product_id = None

                # Insert or find Pack
                if pack_name:
                    cur.execute(f"""
                        SELECT id_pack FROM pack WHERE name = '{pack_name}' AND fk_id_product = {product_id};
                    """)
                    pack = cur.fetchone()
                    if pack is None:
                        cur.execute(f"""
                            INSERT INTO pack (name, fk_id_product) 
                            VALUES ('{pack_name}', {product_id}) 
                            RETURNING id_pack;
                        """)
                        pack = cur.fetchone()
                    pack_id = pack[0]
                else:
                    pack_id = None

                # Insert sales data for July, August, and September
                for month_col, registry_date in dates.items():
                    so_units = int(row[month_col]) if pd.notna(row[month_col]) else 0
                    if so_units > 0:
                        # Insert or find Sale
                        cur.execute(f"""
                            SELECT id_sale FROM sale 
                            WHERE fk_brick = {region_id} AND registry_date = '{registry_date}';
                        """)
                        sale = cur.fetchone()
                        if sale is None:
                            cur.execute(f"""
                                INSERT INTO sale (registry_date, fk_brick) 
                                VALUES ('{registry_date}', {region_id}) 
                                RETURNING id_sale;
                            """)
                            sale = cur.fetchone()
                        sale_id = sale[0]

                        # Insert SO_Units into sale_product table
                        if product_id:
                            cur.execute(f"""
                                INSERT INTO sale_product (fk_id_sale, fk_cnp, product_amount) 
                                VALUES (
                                    {sale_id}, 
                                    {product_id}, 
                                    {so_units}
                                ) 
                                ON CONFLICT DO NOTHING;
                            """)

            conn.commit()  # Commit transaction
            print("Data inserted successfully.")

        except Exception as e:
            print("Error:", e)
            conn.rollback()  # Rollback on error
